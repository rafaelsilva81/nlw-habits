// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Habit {
    id            String          @id @default(uuid())
    title         String
    created_at    DateTime        @default(now())
    User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    DayHabit      DayHabit[]
    HabitWeekDays HabitWeekDays[]
}

model HabitWeekDays {
    id       String @id @default(uuid())
    habit_id String
    week_day Int

    habit Habit @relation(fields: [habit_id], references: [id])

    @@unique([habit_id, week_day])
}

model Day {
    id       String     @id @default(uuid())
    date     DateTime // 2023-01-16T00:00:00.000Z
    DayHabit DayHabit[]

    @@unique([date])
}

model DayHabit {
    id       String @id @default(uuid())
    day_id   String
    habit_id String

    day   Day   @relation(fields: [day_id], references: [id])
    habit Habit @relation(fields: [habit_id], references: [id])

    @@unique([day_id, habit_id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    habits        Habit[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
